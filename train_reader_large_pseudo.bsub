#!/usr/bin/env bash

#BSUB -J fid
#BSUB -o bosch/%J.stdout
#BSUB -e bosch/%J.stderr
#BSUB -W 48:00
#BSUB -n 4
#BSUB -M 32000
#BSUB -gpu "num=4:mode=exclusive_process:mps=no"
#BSUB -q batch_a100

source activate beir
source utils.sh 

#module load proxy4server-access
#source /fs/applications/p4s-access/1.0/ActivateP4S.sh -a

export WANDB_API_KEY=9caada2c257feff1b6e6a519ad378be3994bc06a

task=$1

basemodel=nq_reader_large_v11lm_separate_layer12_bs16_step3k_continue_kl1_inbatchneg64_accumulate4_ratio8_step8k_step8k
#basemodel=nq_reader_large_v11lm_separate_layer12_bs16_step3k_continue_kl1_inbatchneg64_accumulate4_ratio8_step8k_step8k_msmarco_docrel_ibn16_step4k

eval_data=open_domain_data/NQ/dev.json
text_maxlength=512
answer_maxlength=50
n_context=30
extra=""
if [[ ${task} == 'scidocs' ]]; then
  train_data=open_domain_data/scidocs_pseudo5/train.json
elif [[ ${task} == 'bioasq_500k' ]]; then
  train_data=open_domain_data/bioasq_500k.nosummary/train.json
  eval_data=open_domain_data/bioasq_500k.nosummary/test.json
  extra='--join_multiple_answer ,'
elif [[ ${task} == 'bioasq_1m' ]]; then
  train_data=open_domain_data/bioasq_1m/train.json
  eval_data=open_domain_data/bioasq_1m/test.json
  extra='--join_multiple_answer ,'
elif [[ ${task} == 'bioasq_1m_16' ]]; then
  train_data=open_domain_data/bioasq_1m/train.16.json
  eval_data=open_domain_data/bioasq_1m/test.json
  extra='--join_multiple_answer ,'
elif [[ ${task} == 'bioasq_1m_64' ]]; then
  train_data=open_domain_data/bioasq_1m/train.64.json
  eval_data=open_domain_data/bioasq_1m/test.json
  extra='--join_multiple_answer ,'
elif [[ ${task} == 'bioasq_1m_256' ]]; then
  train_data=open_domain_data/bioasq_1m/train.256.json
  eval_data=open_domain_data/bioasq_1m/test.json
  extra='--join_multiple_answer ,'
elif [[ ${task} == 'bioasq_1m_1024' ]]; then
  train_data=open_domain_data/bioasq_1m/train.1024.json
  eval_data=open_domain_data/bioasq_1m/test.json
  extra='--join_multiple_answer ,'
elif [[ ${task} == 'bioasq_1m_pseudo' ]]; then
  train_data=open_domain_data/bioasq_1m_pseudo1_sub100k/train.json
  eval_data=open_domain_data/bioasq_1m/test.json
elif [[ ${task} == 'fiqa' ]]; then
  train_data=open_domain_data/fiqa/train.json
  eval_data=open_domain_data/fiqa/dev.json
  answer_maxlength=128
elif [[ ${task} == 'trec_covid' ]]; then
  train_data=open_domain_data/trec_covid_pseudo1/train.json
elif [[ ${task} == 'cqa' ]]; then
  train_data=open_domain_data/cqadupstack/pseudo1_sub20k_train.json
elif [[ ${task} == 'scifact' ]]; then
  train_data=open_domain_data/scifact_pseudo5/train.json
elif [[ ${task} == 'nfcorpus' ]]; then
  train_data=open_domain_data/nfcorpus_pseudo5/train.json
elif [[ ${task} == 'touche2020' ]]; then
  train_data=open_domain_data/touche2020_pseudo1_sub100k/train.json
elif [[ ${task} == 'msmarco' ]]; then
  train_data=open_domain_data/msmarco_pseudo1_sub200k/train.json
  text_maxlength=250
  n_context=100
elif [[ ${task} == 'msmarco_doc' ]]; then
  train_data=open_domain_data/msmarco/train_with_doc_sub50k.json
  eval_data=open_domain_data/msmarco/dev_with_doc.json
  text_maxlength=250
  n_context=100
elif [[ ${task} == 'msmarco_docrel' ]]; then
  train_data=open_domain_data/msmarco/train_with_docrel_sub50k.json
  eval_data=open_domain_data/msmarco/dev_with_docrel.json
  text_maxlength=250
  n_context=100
elif [[ ${task} == 'msmarco_docrel_200k' ]]; then
  train_data=open_domain_data/msmarco/train_with_docrel_sub200k.json
  eval_data=open_domain_data/msmarco/dev_with_docrel.json
  text_maxlength=250
  n_context=100
elif [[ ${task} == 'msmarco_docrel_all' ]]; then
  train_data=open_domain_data/msmarco/train_with_docrel.json
  eval_data=open_domain_data/msmarco/dev_with_docrel.json
  text_maxlength=250
  n_context=100
else
  exit
fi

num_gpu=8
batch_size=2
accum=1
num_keep_ctx_in_decoder=0
combine_weight=0
metric=em

init_model=google/t5-large-lm-adapt
ckpt_dir=trained_reader
name=${basemodel}_${task}_ibn16_step4k
init_from=${ckpt_dir}/${basemodel}/checkpoint/latest
only_topk_n_context=0
n_layer_two_tower=12
layer_for_retrieval=first
keep_ctx_in_decoder_with_head=0
keep_ctx_in_decoder_head_tau=0.001
head_weights_norm_func=softmax
encoder_decoder_kl_ratio=1.0
encoder_encoder_kl_ratio=0.0
encoder_encoder_kl="first|last=3|10"
encoder_encoder_kl_sparsity=0
retrieval_aggregation_method=all-avg-max
attention_mask=separate
query_in_decoder=no

get_prefix ${num_gpu}

cat ./train_reader_large_pseudo.bsub &> ${ckpt_dir}/${name}.out
python ${prefix} train_reader.py \
  --train_data ${train_data} \
  --eval_data ${eval_data} \
  --model_size ${init_model} \
  --use_checkpoint \
  --text_maxlength ${text_maxlength} \
  --answer_maxlength ${answer_maxlength} \
  --per_gpu_batch_size ${batch_size} \
  --accumulation_steps ${accum} \
  --n_context ${n_context} \
  --only_topk_n_context ${only_topk_n_context} \
  --name ${name} \
  --checkpoint_dir ${ckpt_dir} \
  --lr 0.00005 \
  --optim adamw \
  --scheduler linear \
  --weight_decay 0.01 \
  --n_layer_two_tower ${n_layer_two_tower} \
  --layer_for_retrieval ${layer_for_retrieval} \
  --num_keep_ctx_in_decoder ${num_keep_ctx_in_decoder} \
  --combine_weight ${combine_weight} \
  --keep_ctx_in_decoder_head_tau ${keep_ctx_in_decoder_head_tau} \
  --head_weights_norm_func ${head_weights_norm_func} \
  --encoder_decoder_kl_ratio ${encoder_decoder_kl_ratio} \
  --encoder_encoder_kl_ratio ${encoder_encoder_kl_ratio} \
  --encoder_encoder_kl ${encoder_encoder_kl} \
  --encoder_encoder_kl_sparsity ${encoder_encoder_kl_sparsity} \
  --retrieval_aggregation_method ${retrieval_aggregation_method} \
  --attention_mask ${attention_mask} \
  --query_in_decoder ${query_in_decoder} \
  --total_step 4000 \
  --warmup_step 400 \
  --save_freq 4000 \
  --eval_freq 200 \
  --eval_num_examples 200 \
  --metric ${metric} \
  --wandb_name ${ckpt_dir}/${name} \
  --wandb_log_freq 10 \
  --in_batch_negative \
  --init_from ${init_from} ${extra} &>> ${ckpt_dir}/${name}.out
